This is the jeve version history.
Author: Simon Taddiken

Version 3.0.0 [Released: TODO]
    * [ADD] PerformanceListenerStore implementation
    * [ADD] SynchronousEvent and EventStack to control cascading events when using 
            DefaultEventProvider.
    * [CHANGE] Event#getListenerStore() throws an Exception when called if the event is 
               not dispatched.
    * [CHANGE] Remove 'final' modifier from DefaultListenerStore 
    * [CHANGE] Remove EventProvider.DEFAULT_HANDLER (deprecated since 2.0.2)
    * [DEPRECATED] DefaultTargetEvent (use Event.dispatchDefault instead)
    * [DEPRECATED] ExceptionCallback.exception(Exception, Listener, Event) (use
                   ExceptionCallback.exception(EventProvider, Listener, Event) instead)
    * [DEPRECATED] EventProvider.dispatch(DefaultTargetEvent) (use 
                   EventProvider.dispatch(Event) instead)
    * [DEPRECATED] DefaultListenerStore.removeInternal

Version 2.0.2 [Released: 01.12.2014]
    * [FIXED] #4: PriorityListenerStore.close() does not call 'onUnregister'

Version 2.0.1 [Released: 29.11.2014]
    * [DEPRECATED] EventProvider.DEFAULT_HANDLER
    * [FIXED] ConcurrentModificationException when modifying ListenerStores during dispatch.

Version 2.0.0 [Released: 20.10.2014]
    * New package layout
    * Remove 'listenerClass' parameter from EventProvider#dispatch. Each Event 
      instance now specifies the class of the listener which can handle it.
    * Add 'Fluent API' to build EventProviders, remove static factory methods.
    * Removed deprecated method 'workDone' from the Listener interface
    * Corrected semantics of AbortionException: those will be delegated up to 
      the caller of EventProvider#dispatch and will no longer be passed to the
      ExceptionCallback when thrown by a listener.
    * Separate EventProviders and registered Listeners. A provider now needs 
      a 'ListenerStore' instance for managing listeners. Hence, all methods for 
      managing listeners were removed from EventProvider
    * Add reference to the ListenerStore from which the currently dispatching 
      EventProvider obtained its listeners to Event instances.
    * Add 'stopNotifying(Listener)' method to Event instances to remove a 
      Listener from the ListenerStore from which it was retrieved by the 
      currently dispatching the EventProvider.
    * Add StatisticsEventProvider which counts dispatching invocations for 
      debugging purposes.
    * 'PriorityListenerStore' allows to assign priorities to listeners.
    * Add 'DefaultTargetEvent' and a new dispatch overload which does not need
      a method reference to the listening method to notify.

Version 1.1.0 [Released: 04.06.2014]
    * Added ParallelEventProvider which notifies each listener within an own
      thread.
    * Deprecated Listener#workDone(EventProvider) in favor of manual removal
      of listeners
    * Added annotation @ListenerInterface and AnnotationProcessor which checks
      whether your listeners adhere to the default style of listener interfaces
    * Added AbortionException as a way to brutally stop event delegation

Version 1.0.0 [Released: 21.04.2014]
    * initial API and implementation